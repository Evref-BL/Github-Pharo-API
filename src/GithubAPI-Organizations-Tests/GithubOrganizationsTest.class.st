"
A GithubOrganizationsTest is a test class for testing the behavior of GithubOrganizations
"
Class {
	#name : 'GithubOrganizationsTest',
	#superclass : 'TestCase',
	#category : 'GithubAPI-Organizations-Tests',
	#package : 'GithubAPI-Organizations-Tests'
}

{ #category : 'as yet unclassified' }
GithubOrganizationsTest >> orgsEvrefBl [
	^ '{
  "login": "Evref-BL",
  "id": 124255930,
  "node_id": "O_kgDOB2f-ug",
  "url": "https://api.github.com/orgs/Evref-BL",
  "repos_url": "https://api.github.com/orgs/Evref-BL/repos",
  "events_url": "https://api.github.com/orgs/Evref-BL/events",
  "hooks_url": "https://api.github.com/orgs/Evref-BL/hooks",
  "issues_url": "https://api.github.com/orgs/Evref-BL/issues",
  "members_url": "https://api.github.com/orgs/Evref-BL/members{/member}",
  "public_members_url": "https://api.github.com/orgs/Evref-BL/public_members{/member}",
  "avatar_url": "https://avatars.githubusercontent.com/u/124255930?v=4",
  "description": "",
  "name": "Evref - Berger-Levrault",
  "company": null,
  "blog": null,
  "location": "France",
  "email": null,
  "twitter_username": null,
  "is_verified": false,
  "has_organization_projects": true,
  "has_repository_projects": true,
  "public_repos": 44,
  "public_gists": 0,
  "followers": 9,
  "following": 0,
  "html_url": "https://github.com/Evref-BL",
  "created_at": "2023-02-02T10:26:04Z",
  "updated_at": "2025-08-08T12:52:53Z",
  "archived_at": null,
  "type": "Organization"
}
'
]

{ #category : 'as yet unclassified' }
GithubOrganizationsTest >> orgsEvrefBlRepo [
	^ '[
  {
    "id": 299571024,
    "node_id": "MDEwOlJlcG9zaXRvcnkyOTk1NzEwMjQ=",
    "name": "Moose-REST-API",
    "full_name": "Evref-BL/Moose-REST-API",
    "private": false,
    "owner": {
      "login": "Evref-BL",
      "id": 124255930,
      "node_id": "O_kgDOB2f-ug",
      "gravatar_id": "",
      "type": "Organization",
      "user_view_type": "public",
      "site_admin": false
    },
    "description": null,
    "fork": false,
    "created_at": "2020-09-29T09:40:25Z",
    "updated_at": "2023-08-08T13:27:23Z",
    "pushed_at": "2023-08-08T13:32:15Z",
    "homepage": null,
    "size": 36,
    "stargazers_count": 0,
    "watchers_count": 0,
    "language": "Smalltalk",
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "has_discussions": false,
    "forks_count": 1,
    "archived": false,
    "disabled": false,
    "open_issues_count": 0,
    "license": {
      "key": "mit",
      "name": "MIT License",
      "spdx_id": "MIT",
      "node_id": "MDc6TGljZW5zZTEz"
    },
    "allow_forking": true,
    "is_template": false,
    "web_commit_signoff_required": false,
    "topics": [],
    "visibility": "public",
    "forks": 1,
    "open_issues": 0,
    "watchers": 0,
    "default_branch": "master",
    "permissions": {
      "admin": false,
      "maintain": false,
      "push": false,
      "triage": false,
      "pull": true
    },
    "custom_properties": {}
  }
]'
]

{ #category : 'as yet unclassified' }
GithubOrganizationsTest >> orgsEvrefBlRepos [
	^ '[
  {
    "id": 299571024,
    "node_id": "MDEwOlJlcG9zaXRvcnkyOTk1NzEwMjQ=",
    "name": "Moose-REST-API",
    "full_name": "Evref-BL/Moose-REST-API",
    "private": false,
    "owner": {
      "login": "Evref-BL",
      "id": 124255930,
      "node_id": "O_kgDOB2f-ug",
      "gravatar_id": "",
      "type": "Organization",
      "user_view_type": "public",
      "site_admin": false
    },
    "description": null,
    "fork": false,
    "created_at": "2020-09-29T09:40:25Z",
    "updated_at": "2023-08-08T13:27:23Z",
    "pushed_at": "2023-08-08T13:32:15Z",
    "homepage": null,
    "size": 36,
    "stargazers_count": 0,
    "watchers_count": 0,
    "language": "Smalltalk",
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "has_discussions": false,
    "forks_count": 1,
    "archived": false,
    "disabled": false,
    "open_issues_count": 0,
    "license": {
      "key": "mit",
      "name": "MIT License",
      "spdx_id": "MIT",
      "node_id": "MDc6TGljZW5zZTEz"
    },
    "allow_forking": true,
    "is_template": false,
    "web_commit_signoff_required": false,
    "topics": [],
    "visibility": "public",
    "forks": 1,
    "open_issues": 0,
    "watchers": 0,
    "default_branch": "master",
    "permissions": {
      "admin": false,
      "maintain": false,
      "push": false,
      "triage": false,
      "pull": true
    },
    "custom_properties": {}
  },
  {
    "id": 519102762,
    "node_id": "R_kgDOHvDhKg",
    "name": "FamixJavaModelUpdater",
    "full_name": "Evref-BL/FamixJavaModelUpdater",
    "private": false,
    "owner": {
      "login": "Evref-BL",
      "id": 124255930,
      "node_id": "O_kgDOB2f-ug",
      "gravatar_id": "",
      "type": "Organization",
      "user_view_type": "public",
      "site_admin": false
    },

    "homepage": null,
    "size": 160,
    "stargazers_count": 0,
    "watchers_count": 0,
    "language": "Smalltalk",
    "has_issues": true,
    "has_projects": true,
    "has_downloads": true,
    "has_wiki": true,
    "has_pages": false,
    "has_discussions": false,
    "forks_count": 3,
    "archived": false,
    "disabled": false,
    "open_issues_count": 0,
    "license": {
      "key": "mit",
      "name": "MIT License",
      "spdx_id": "MIT",
      "node_id": "MDc6TGljZW5zZTEz"
    },
    "allow_forking": true,
    "is_template": false,
    "web_commit_signoff_required": false,
    "topics": [],
    "visibility": "public",
    "forks": 3,
    "open_issues": 0,
    "watchers": 0,
    "default_branch": "v2",
    "permissions": {
      "admin": false,
      "maintain": false,
      "push": false,
      "triage": false,
      "pull": true
    },
    "custom_properties": {}
  }
]'
]

{ #category : 'tests' }
GithubOrganizationsTest >> testGet [

	| hostUrl gitlabApi result client endpoint gitlabRessource data responseMessage response |
	
	"Given"
	hostUrl := 'https://www.url.com'.
	client := ZnClient new.
	
	gitlabApi := GithubApi new privateToken: 'token'; hostUrl: hostUrl; client: client.
	
	endpoint := '/endpoint'.
	data := { 'param' -> 'value' } asDictionary.
	
	responseMessage := 'Evref-BL'.
	response := self orgsEvrefBl.

	gitlabRessource := gitlabApi organizations .
	
	(client stub get) willReturn: response.
	
	"When"
	result := gitlabRessource get: 'evref-bl'.
	
	"Then"
	self assert: (result isDictionary) .
	self assert: (result at: #login) equals: responseMessage.
	self assert: (result at: #id) equals: 124255930.
]

{ #category : 'tests' }
GithubOrganizationsTest >> testGetRepositoriesOfOrganization [

	| hostUrl gitlabApi result client endpoint gitlabRessource data responseMessage response |
	
	"Given"
	hostUrl := 'https://www.url.com'.
	client := ZnClient new.
	
	gitlabApi := GithubApi new privateToken: 'token'; hostUrl: hostUrl; client: client.
	
	endpoint := ('/' join: {'/orgs' . 'evref-bl' . 'repos'}).
	data := { 'param' -> 'value' } asDictionary.
	
	responseMessage := 'Evref-BL'.
	response := NeoJSONReader fromString: self orgsEvrefBlRepos.

	gitlabRessource := gitlabApi organizations .
	

	(gitlabRessource stub getAll: endpoint withParams: Dictionary new) willReturn: response.


	"When"
	result := gitlabRessource getRepositoriesOfOrganization: 'evref-bl'.
	
	"Then"
	self assert: (result isArray).
	self assert: (result first isDictionary ) .
	self assert: (result second isDictionary) .
	self assert: (result first at: #name) equals: 'Moose-REST-API'.
	self assert: (result second at: #name) equals: 'FamixJavaModelUpdater'.
]

{ #category : 'tests' }
GithubOrganizationsTest >> testGetRepositoriesOfOrganizationPerPagePage [

	| hostUrl gitlabApi result client endpoint gitlabRessource data responseMessage response |
	
	"Given"
	hostUrl := 'https://www.url.com'.
	client := ZnClient new.
	
	gitlabApi := GithubApi new privateToken: 'token'; hostUrl: hostUrl; client: client.
	
	endpoint := ('/' join: {'/orgs' . 'evref-bl' . 'repos'}).
	data := { 'per_page' -> 1.
				'page' -> 1 } asDictionary.
	
	responseMessage := 'Evref-BL'.
	response := (NeoJSONReader fromString: self orgsEvrefBlRepo).

	gitlabRessource := gitlabApi organizations .
	

	(gitlabRessource stub get: endpoint withParams: data) willReturn: response.

	.
	"When"
	result := gitlabRessource getRepositoriesOfOrganization: 'evref-bl' perPage: 1 page: 1 .
	
	"Then"
	self assert: (result isArray).
	self assert: (result size ) equals: 1 .
	self assert: (result first at: #name) equals: 'Moose-REST-API'.
]

{ #category : 'tests' }
GithubOrganizationsTest >> testGetRepositoryOfOrganization [

	| hostUrl gitlabApi result client endpoint gitlabRessource data responseMessage response |
	
	"Given"
	hostUrl := 'https://www.url.com'.
	client := ZnClient new.
	
	gitlabApi := GithubApi new privateToken: 'token'; hostUrl: hostUrl; client: client.
	
	endpoint := ('/' join: {'/orgs' . 'evref-bl' . 'repos'}).
	data := { 'param' -> 'value' } asDictionary.
	
	responseMessage := 'Evref-BL'.
	response :=  NeoJSONWriter toString: ((NeoJSONReader fromString: self orgsEvrefBlRepo) first).

	gitlabRessource := gitlabApi organizations .
	

	(client stub get) willReturn: response.

	
	"When"
	result := gitlabRessource getRepository: 'Moose-REST-API' ofOrganization: 'evref-bl'.
	
	"Then"
	self assert: (result isDictionary).
	self assert: (result at: #name) equals: 'Moose-REST-API'.

]
